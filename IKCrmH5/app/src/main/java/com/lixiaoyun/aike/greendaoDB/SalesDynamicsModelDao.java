package com.lixiaoyun.aike.greendaoDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lixiaoyun.aike.entity.model.SalesDynamicsModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALES_DYNAMICS_MODEL".
*/
public class SalesDynamicsModelDao extends AbstractDao<SalesDynamicsModel, Long> {

    public static final String TABLENAME = "SALES_DYNAMICS_MODEL";

    /**
     * Properties of entity SalesDynamicsModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemId = new Property(1, Long.class, "itemId", false, "ITEM_ID");
        public final static Property CallId = new Property(2, String.class, "callId", false, "CALL_ID");
        public final static Property CreateTime = new Property(3, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property EndTime = new Property(4, Long.class, "endTime", false, "END_TIME");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property PhoneNumber = new Property(6, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property PhoneType = new Property(7, String.class, "phoneType", false, "PHONE_TYPE");
        public final static Property Duration = new Property(8, int.class, "duration", false, "DURATION");
        public final static Property ContactAlias = new Property(9, String.class, "contactAlias", false, "CONTACT_ALIAS");
        public final static Property RecordFilePath = new Property(10, String.class, "recordFilePath", false, "RECORD_FILE_PATH");
        public final static Property CallerType = new Property(11, String.class, "callerType", false, "CALLER_TYPE");
        public final static Property CallerId = new Property(12, String.class, "callerId", false, "CALLER_ID");
        public final static Property NameType = new Property(13, String.class, "nameType", false, "NAME_TYPE");
        public final static Property TakeOff = new Property(14, boolean.class, "takeOff", false, "TAKE_OFF");
    }


    public SalesDynamicsModelDao(DaoConfig config) {
        super(config);
    }
    
    public SalesDynamicsModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALES_DYNAMICS_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM_ID\" INTEGER," + // 1: itemId
                "\"CALL_ID\" TEXT," + // 2: callId
                "\"CREATE_TIME\" INTEGER," + // 3: createTime
                "\"END_TIME\" INTEGER," + // 4: endTime
                "\"NAME\" TEXT," + // 5: name
                "\"PHONE_NUMBER\" TEXT," + // 6: phoneNumber
                "\"PHONE_TYPE\" TEXT," + // 7: phoneType
                "\"DURATION\" INTEGER NOT NULL ," + // 8: duration
                "\"CONTACT_ALIAS\" TEXT," + // 9: contactAlias
                "\"RECORD_FILE_PATH\" TEXT," + // 10: recordFilePath
                "\"CALLER_TYPE\" TEXT," + // 11: callerType
                "\"CALLER_ID\" TEXT," + // 12: callerId
                "\"NAME_TYPE\" TEXT," + // 13: nameType
                "\"TAKE_OFF\" INTEGER NOT NULL );"); // 14: takeOff
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALES_DYNAMICS_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SalesDynamicsModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(2, itemId);
        }
 
        String callId = entity.getCallId();
        if (callId != null) {
            stmt.bindString(3, callId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(7, phoneNumber);
        }
 
        String phoneType = entity.getPhoneType();
        if (phoneType != null) {
            stmt.bindString(8, phoneType);
        }
        stmt.bindLong(9, entity.getDuration());
 
        String contactAlias = entity.getContactAlias();
        if (contactAlias != null) {
            stmt.bindString(10, contactAlias);
        }
 
        String recordFilePath = entity.getRecordFilePath();
        if (recordFilePath != null) {
            stmt.bindString(11, recordFilePath);
        }
 
        String callerType = entity.getCallerType();
        if (callerType != null) {
            stmt.bindString(12, callerType);
        }
 
        String callerId = entity.getCallerId();
        if (callerId != null) {
            stmt.bindString(13, callerId);
        }
 
        String nameType = entity.getNameType();
        if (nameType != null) {
            stmt.bindString(14, nameType);
        }
        stmt.bindLong(15, entity.getTakeOff() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SalesDynamicsModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(2, itemId);
        }
 
        String callId = entity.getCallId();
        if (callId != null) {
            stmt.bindString(3, callId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(7, phoneNumber);
        }
 
        String phoneType = entity.getPhoneType();
        if (phoneType != null) {
            stmt.bindString(8, phoneType);
        }
        stmt.bindLong(9, entity.getDuration());
 
        String contactAlias = entity.getContactAlias();
        if (contactAlias != null) {
            stmt.bindString(10, contactAlias);
        }
 
        String recordFilePath = entity.getRecordFilePath();
        if (recordFilePath != null) {
            stmt.bindString(11, recordFilePath);
        }
 
        String callerType = entity.getCallerType();
        if (callerType != null) {
            stmt.bindString(12, callerType);
        }
 
        String callerId = entity.getCallerId();
        if (callerId != null) {
            stmt.bindString(13, callerId);
        }
 
        String nameType = entity.getNameType();
        if (nameType != null) {
            stmt.bindString(14, nameType);
        }
        stmt.bindLong(15, entity.getTakeOff() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SalesDynamicsModel readEntity(Cursor cursor, int offset) {
        SalesDynamicsModel entity = new SalesDynamicsModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // itemId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // callId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // endTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phoneNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phoneType
            cursor.getInt(offset + 8), // duration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // contactAlias
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // recordFilePath
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // callerType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // callerId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // nameType
            cursor.getShort(offset + 14) != 0 // takeOff
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SalesDynamicsModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCallId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhoneType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDuration(cursor.getInt(offset + 8));
        entity.setContactAlias(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecordFilePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCallerType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCallerId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNameType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTakeOff(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SalesDynamicsModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SalesDynamicsModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SalesDynamicsModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
